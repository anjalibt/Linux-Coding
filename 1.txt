TASK ONE 
NUMBERS AND VARIABLES 



1. Create three variables in a single line and assign values to them in such a manner that each one of them belongs to a different data type. 
E.g. : 
a = 1, 
b = 2.01, 
c = 'string' 

Kishans-MBP:~ kishanthapaliya$ python3
Python 3.9.1 (v3.9.1:1e5d33e9b9, Dec  7 2020, 12:10:52) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 1
>>> b=2.01
>>> c='string'

2. Create a variable of type complex and swap it with another variable of type integer. 

string
Kishans-MBP:code kishanthapaliya$ 
Kishans-MBP:code kishanthapaliya$ python3
Python 3.9.1 (v3.9.1:1e5d33e9b9, Dec  7 2020, 12:10:52) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> age = 20
>>> age
20
>>> sentence = "my name is Anjali"
>>> sentence
'my name is Anjali'
>>> 



3. Swap two numbers using a third variable and do the same task without using any third variable. 

>>> x = 10
>>> y = 5
>>> x = x + y
>>> 
>>> x
15

4. Write a program that takes input from the user and prints it using both Python 2.x and Python 3.x Version. 

Python 2
print 'Python', python_version()
print 'Hello, World!'
print('Hello, World!')
print "text", ; print 'print more text on the same line'
Python 2.7.6
Hello, World!
Hello, World!
text print more text on the same line


Python 3
print('Python', python_version())
print('Hello, World!')

print("some text,", end="")
print(' print more text on the same line')
Python 3.4.1
Hello, World!
some text, print more text on the same line
print 'Hello, World!'
  File "<ipython-input-3-139a7c5835bd>", line 1
    print 'Hello, World!'

5. Write a program to complete the task given below: 
Ask users to enter any 2 numbers in between 1-10 , add the two numbers and keep the sum in another variable called z. Add 30 to z and store the output in variable result and print result as the final output. 

>>> x = 3
>>> y = 8
>>> z = x + y
>>> z
11
>>> u = 30
>>> z = z + u
>>> z
41

6. Write a program to check the data type of the entered values. 
HINT: Printed output should say - The data type of the input value is : int/float/string/etc


>>> print ("string to float:", float ("3.4"))
string to float: 3.4
>>> print ("float to int:", int (3.4))
float to int: 3
>>> 







7. Create Variables using formats such as Upper CamelCase, Lower CamelCase, SnakeCase and UPPERCASE. 
(Refer: https://capitalizemytitle.com/camel-case/) 

Upper CamelCase: name = SnakeCaseName
 Lower CamelCase: name = notCamelCase
SnakeCase: name = 'snake_case_name'
UPPERCASE: THE GIVEN STRING IN UPPERCASE = HELLO WORLD


8. If one data type value is assigned to ‘a’ variable and then a different data type value is assigned to ‘a’ again. Will it change the value? If Yes then Why?

It will not change. 

'a'is a string, so-called because it contains a string of letters. You (and the interpreter) can identify strings because they are enclosed in quotation marks.


If you are not sure what type a value has, the interpreter can tell you.

>>> type("a")
<type 'str'>



TASK TWO 
OPERATORS AND DECISION MAKING STATEMENT 



1. Write a program in Python to perform the following operation: 
If a number is divisible by 3 it should print “Consultadd” as a string 
If a number is divisible by 5 it should print “Python Training” as a string 
If a number is divisible by both 3 and 5 it should print “Consultadd - Python Training” as a string. 

a = a(input("Enter any value:"))
if a % 3 == 0 and a % 5 == 0:
    print("Consultadd Python Training")
elif user_input % 3 == 0:
    print("Consultadd")
elif user_input % 5 == 0:
    print("Python Training")

Kishans-MBP:code kishanthapaliya$ /usr/local/bin/python3 /Users/kishanthapaliya/Desktop/code/Python.py
Enter  any value:3
Consultadd
Kishans-MBP:code kishanthapaliya$ 

2. Write a program in Python to perform the following operator based task: 
Ask user to choose the following option first: 

If User Enter 1 - Addition 
If User Enter 2 - Subtraction 
If User Enter 3 - Division 
If User Enter 4 - Multiplication 
If User Enter 5 - Average 
Ask user to enter two numbers and keep those numbers in variables num1 and num2 respectively for the first 4 options mentioned above. 
Ask the user to enter two more numbers as first and second for calculating the average as soon as the user chooses an option 5. 
At the end if the answer of any operation is Negative print a statement saying “NEGATIVE” 
NOTE: At a time a user can only perform one action. 

"""

user_input1 = eval(input("""Enter your choice(Option #):
1. Addition
2. Subtraction
3. Division
4. Multiplication
5. Average
"""))
if user_input1 in [1, 2, 3, 4, 5]:
    first = eval(input("Enter first number:"))
    second = eval(input("Enter second number:"))
    if user_input1 == 1:
        print("Addition:", first + second)
    elif user_input1 == 2:
        print("Subtraction:", first - second)
    elif user_input1 == 3:
        print("Division:", first / second)
    elif user_input1 == 2:
        print("Multiplication:", first * second)
    else:
        first1 = eval(input("Enter the third number:"))
        second1 = eval(input("Enter fourth number:"))
        print("Average:", sum([first, second, first1, second1]) / 4)
else:
    print("ZSA")

"""

3. Write a program in Python to implement the given flowchart:


"""
Program for the given flowchart
"""
a, b, c = 10, 20, 30
avg = (a + b + c) / 3
print("avg = ", avg)
if avg > a and avg > b and avg > c:
    print("Average is higher than a, b, c")
else:
    if avg > a and avg > b:
        print("Average is higher than a, b, c")
    elif avg > a and avg > c:
        print("Average is higher than a, c")
    elif avg > b and avg > c:
        print("Average is higher than b, c")
    elif avg > a:
        print("Average is higher than a only.")
    elif avg > b:
        print("Average is higher than b only.")
    elif avg > c:
        print("Average is higher than c only.")

"""




4. Write a program in Python to break and continue if the following cases occurs: 
If user enters a negative number just break the loop and print “It’s Over” 
If user enters a positive number just continue in the loop and print “Good Going” 

num = 10

"(i)"

av=0
UserInput = int(input("Enter a number: "))
num=0
while num<=UserInput:
    if num<av:
        break
    print("working")
    num+=1
print("it's over")
"(ii)"
'''
UsIn = int(input("Enter a number: "))
val=0
while val > UsIn:
    continue
print("going good")'''

 	



5. Write a program in Python which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200. 

nl=[]
for x in range(2000, 3200):
    if (x%7==0) and (x%5==0):
        nl.append(str(x))
print (','.join(nl))

6. What is the output of the following code examples?

x=123 

for i in x: 
print(i) 
i = 0 

while i < 5: 
print(i) 
i += 1 
if i == 3: 
break 
else: 
print(“error”) 
count = 0 

while True: 
print(count) 
count += 1 
if count >= 5: 
Break 


"""

x = 123
for i in x:
    print(i)

i = 0
while i < 5:
    print(i)
    i += 1
    if i == 3:
        break
    else:
        print("error")

count = 0
while True:
    print(count)
    count += 1
    if count >= 5:
        break

"""
7. Write a program that prints all the numbers from 0 to 6 except 3 and 6. 
Expected output: 0 1 2 4 5 
Note: Use ‘continue’ statement

for x in range(7):
   if (x == 3 or x==6):
       continue
   print(x, end=' ')
print("\n")




8. Write a program that accepts a string as an input from the user and calculate the number of digits and letters. 
Sample input: consul72 
Expected output: Letters 6 Digits 2 

s = input("consul72")
d=l=0
for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass


print("Letters", l)
print("Digits", d)

Kishans-MBP:code kishanthapaliya$ /usr/local/bin/python3 /Users/kishanthapaliya/Desktop/code/Python.py
input a string consul72
Letters 6
Digits 2

9. Read the two parts of the question below: 
Write a program such that it asks users to “guess the lucky number”. If the correct number is guessed the program stops, otherwise it continues forever. 
Modify the program so that it asks users whether they want to guess again each time. Use two variables, ‘number’ for the number and ‘answer’ for the answer to the question whether they want to continue guessing. The program stops if the user guesses the correct number or answers “no”. ( The program continues as long as a user has not answered “no” and has not guessed the correct number) 

"""
guess = 57
while True:
    user_input = int(input("Guess the lucky number: "))
    if user_input == guess:
        user_input, answer = input("Do you want to guess again? (Enter number & Yes to continue. Enter No to stop")
        if user_input != guess and answer.lower() == 'yes':
            continue
        elif user_input == guess:
            break
        elif answer.lower == 'no':
            break

"""

10. Write a program that asks five times to guess the lucky number. Use a while loop and a counter, such as 
counter=1 

While counter <= 5: 
print(“Type in the”, counter, “number” 
counter=counter+1 
The program asks for five guesses (no matter whether the correct number was guessed or not). If the correct number is guessed, the program outputs “Good guess!”, otherwise it outputs “Try again!”. After the fifth guess it stops and prints “Game over!”.

"""
import random
guess = 57
counter = 0
while counter < 5:
    user_input = int(input("Guess the lucky number: "))
    if user_input == guess:
        print("Good guess!")
        guess = random.randint(1, 100)
    else:
        print("Try again!")
    counter += 1
print("Game over!")

"""







11. In the previous question, insert break after the “Good guess!” print statement. break will terminate the while loop so that users do not have to continue guessing after they found the number. If the user does not guess the number at all, print “Sorry but that was not very successful”.

"""
import random
guess = 57
counter = 0
while counter < 5:
    user_input = int(input("Guess the lucky number: "))
    if user_input == guess:
        print("Good guess!")
        break
    else:
        print("Try again!")
    counter += 1
print("Sorry but that was not very successful!")


TASK THREE
DATA STRUCTURES

1.	Create a list of the 10 elements of four different types of Data Type like int, string, complex and float.

f = [1, "Anjali", 1+3j, 2.5, "Byanjankar", 2, 2.90, "Training", 8+9j]


2. 	Create a list of size 5 and execute the slicing structure 


f = (1, "Anjali", 1+3j, 2.5)
print(f[1])
print(f[2])
print(f[3])
print(f[:1])


3.  Write a program to get the sum and multiply of all the items in a given list.

f = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
f1 = 0
f2 = 1
for i in f:
    f1 += i
for i in f:
    f2 *= i
print("Sum:", f1)
print("Multiply:", f2)

4.  Find the largest and smallest number from a given list.

f = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("min:", min(f))
print("max:", max(f))

5. 	Create a new list which contains the specified numbers after removing the even numbers from a predefined list.

f = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11]
a = [i for i in f if i % 2 != 0]
print("even numbers:", a)


6.	Create a list of first and last 5 elements where the values are square of numbers between 1 and 30 (both included).

f = [i*i for i in range(1, 31)]
print("First 5 elements:", f[:5])
print("Last 5 elements:", f[-5:])

7.	Write a program to replace the last element in a list with another list.
Sample data: [[1,3,5,7,9,10],[2,4,6,8]]
Expected output: [1,3,5,7,9,2,4,6,8]

a = [1, 3, 5, 7, 9, 10]
b = [2, 4, 6, 8]

print(a).extend(b)

8.	Create a new dictionary by concatenating the following two dictionaries:
a={1:10,2:20}
b={3:30,4:40}
Expected Result: {1:10,2:20,3:30,4:40}

a={1:10,2:20}
b={3:30,4:40}
c={**a, **b}
print(c)

9.	Create a dictionary that contains a number (between 1 and n) in the form(x,x*x).
Sample data (n=5)
Expected Output: {1:1,2:4,3:9,4:16,5:25}

n=int(input("Input a number "))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d)

10. Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number. 
    Suppose the following input is supplied to the program:
34,67,55,33,12,98
The output should be:
[‘34’,’67’,’55’,’33’,’12’,’98’]
(‘34’,’67’,’55’,’33’,’12’,’98’)

v= input("Input some comma seprated numbers : ")
list = v.split(",")
tuple = tuple(list)
print('List : ',list)
print('Tuple : ',tuple)


TASK 4:

1. Write a program to reverse a string.
Sample input: “1234abcd”
Expected output: “dcba4321”

def string_reverse(s1):

    rs1 = ''
    index = len(s1)
    while index > 0:
        rs1 += s1[ index - 1 ]
        index = index - 1
    return rs1
print(string_reverse('1234abcd'))

2. Write a function that accepts a string and prints the number of uppercase letters and lowercase
letters.
Sample input: “abcSdefPghijQkl”
Expected Output: No. of Uppercase characters : 3 No. of Lower case Characters : 12
def string(s):
    d={"UPPER_CASE":0, "LOWER_CASE":0}
    for c in s:
        if c.isupper():
           d["UPPER_CASE"]+=1
        elif c.islower():
           d["LOWER_CASE"]+=1
        else:
           pass
    print ("Original String : ", s)
    print ("No. of Upper case characters : ", d["UPPER_CASE"])
    print ("No. of Lower case Characters : ", d["LOWER_CASE"])

string('abcSdefPghijQkl')

3. Create a function that takes a list and returns a new list with unique elements of the first list.

ef unique(l):
  x = []
  for a in l:
    if a not in x:
      x.append(a)
  return x

print(unique([1,2,3,3,3,3,4,5])) 

4. Write a program that accepts a hyphen-separated sequence of words as input and prints the words
in a hyphen-separated sequence after sorting them alphabetically.

items=[n for n in input().split('-')]
items.sort()
print('-'.join(items))

5. Write a program that accepts a sequence of lines as input and prints the lines after making all
characters in the sentence capitalized.
Sample input: Hello world Practice makes man perfect
Expected output: HELLO WORLD PRACTICE MAKES MAN PERFECT

f = 'Hello world Practice makes man perfect'
upper_case = f.upper()
print(upper_case)


6. Define a function that can receive two integral numbers in string form and compute their sum and
print it in the console.

num1 = '10'
num2 = '20'
sum = (num1, num2)
print("sum is =", sum)

7. Define a function that can accept two strings as input and print the string with the maximum length
in the console. If two strings have the same length, then the function should print both the strings line
by line.

8. Define a function which can generate and print a tuple where the values are square of numbers
between 1 and 20 (both 1 and 20 included).

def printDict():
    dict={i:i**2 for i in range(1,21)}   # Using comprehension method and
    print(dict)

printDict()

9. Write a function called showNumbers that takes a parameter called limit. It should print all the
numbers between 0 and limit with a label to identify the even and odd numbers.
Sample input: show Numbers(3) (where limit=3)
Expected output:
0 EVEN
1 ODD
2 EVEN
3 ODD

num = int(input("Enter a number: "))
mod = num % 2
if mod > 0:
    print("This is an odd number.")
else:
    print("This is an even number.")
	

10. Write a program which uses filter() to make a list whose elements are even numbers between 1
and 20 (both included)

def printValues():
	l = list()
	for i in range(1,21):
		l.append(i**2)
	print(l)
		
printValues()

11. Write a program which uses map() and filter() to make a list whose elements are squares of even
numbers in [1,2,3,4,5,6,7,8,9,10].
Hints: Use filter() to filter even elements of the given listUse map() to generate a list of squares of the
numbers in the filtered list. Use lambda() to define anonymous functions.

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("Original list of integers:")
print(nums)
print("\nSquare every number of the said list:")
square_nums = list(map(lambda x: x ** 2, nums))
print(square_nums)
print("\nCube every number of the said list:")
cube_nums = list(map(lambda x: x ** 3, nums))
print(cube_nums)

12. Write a function to compute 5/0 and use try/except to catch the exceptions

13. Flatten the list [1,2,3,4,5,6,7] into 1234567 using reduce().

14. Write a program in Python to find the values which are not divisible by 3 but are a multiple of 7.
Make sure to use only higher order functions.

def multiple(m, n):
	return True if m % n == 0 else False

print(multiple(3, 7))


15. Write a program in Python to multiply the elements of a list by itself using a traditional function
and pass the function to map() to complete the operation.

def multiplyList(myList) :
     
    # Multiply elements one by one
    result = 1
    for x in myList:
         result = result * x 
    return result 
     
# Driver code
list1 = [1, 2, 3] 
list2 = [3, 2, 4]
print(multiplyList(list1))
print(multiplyList(list2))


16. What is the output of the following codes:
2
(i) def foo():
try:
return 1
finally:
return 2
k = foo()
print(k)

(ii) def a():
try:
f(x, 4)
finally:
print('after f')
print('after f?')
a()


TASK FIVE
FILE HANDLING AND EXCEPTION HANDLING


1. Write a program in Python to allow the error of syntax to be handled using exception handling.
HINT: Use SyntaxError

ages = {'Anjali': 24, 'Hari': 24, 'michael': 43}
print('Michael is {ages["michael"]} years old.')

2. Write a program in Python to allow the user to open a file by using the argv module. If the
entered name is incorrect throw an exception and ask them to enter the name again. Make sure
to use read only mode.

Ans:

def add(*a):
    print(sum(a))
add(1)
add(1,2,3)
add(*[1,2,3],*(3,4,5))

Results: 
1
6
18

3. Write a program to handle an error if the user entered a number more than four digits it should
return “The length is too short/long !!! Please provide only four digits”

Ans:

n = 1234
try:
    num1 = int(input("Please enter your 4 digits no: "))
except ValueError:
    print (num1, "The length is too short/long !!! Please provide only four digits: ”)


4. Create a login page backend to ask users to enter the username and password. Make sure to
ask for a Re-Type Password and if the password is incorrect give chance to enter it again but it
should not be more than 3 times.

from getpass import getpass

print ("Please select a password: ")
passwd = getpass()

print ("Please re-type your password: ")
if passwd == getpass():
    print ("password created")
else:
    print ("Password does not match. Please try again")

5. Go through the link provided below to understand finally and raise concept:
https://www.programiz.com/python-programming/exception-handling

Finally	- Sometimes we have an important code in our program that needs to be executed irrespective of whether or not the exception is thrown. This code is placed in a special block starting with the “Finally” keyword. The Finally block follows the Try-catch block.

Throw-	The keyword “throw” is used to throw the exception explicitly.

6. Read doc.txt file using Python File handling concept and return only the even length string from
the file. Consider the content of doc.txt as given below:
Hello I am a file
Where you need to return the data string
Which is of even length
Make sure you return the content in The same link as it is present.


f=open("doc.txt", "w")
f.write("Hello I am a file")
f.write("\nWhere you need to return the data string")
f.write("\nWhich is of even length")
f.write("\nMake sure you return the content in The same link as it is present."
)
f.close()

or

with open("doc.txt", "r") as f:
    print(f.read())


TASK SIX
GENERATORS, LIST COMPREHENSION AND DECORATORS

1. Write a program in Python to find out the character in a string which is uppercase using list
comprehension.

# initializing string  
test_str = "This is Comprehensive List"
  
# printing original string  
print("The original string is : " + str(test_str)) 
  
# Extract Upper Case Characters  
# Using list comprehension + isupper() 
res = [char for char in test_str if char.isupper()] 
  

# printing result  
print("The uppercase characters in string are : " + str(res)) 

Results:

The uppercase characters in string are : ['T', 'C', 'L']

2. Write a program to construct a dictionary from the two lists containing the names of students and
their corresponding subjects. The dictionary should map the students with their respective subjects.
Let’s see how to do this using for loops and dictionary comprehension.
HINT - Use Zip function also
Sample input: students = ['Smit', 'Jaya', 'Rayyan'] subjects = ['CSE', 'Networking', 'Operating System']
Expected output: {‘Smit’ : ’CSE’ , ’Jaya’ : ’Networking’ , ’Rayyan’ : ’Operating System’}

Ans:
students = ['Smit', 'Jaya', 'Rayyan']
subjects = ['CSE', 'Networking', 'Operating System']
d = {k:v for k,v in zip(students,subjects)}
print(d)

Results:
{'Smit': 'CSE', 'Jaya': 'Networking', 'Rayyan': 'Operating System'}

3. Learn More about Yield, next and Generators

Ans:

Yield is a keyword that is used like return, except the function will return a generator.
A function with yield, when called, returns a Generator

Generators are iterators, a kind of iterable you can only iterate over once.

Python 3 has a built-in function next() which retrieves the next item from the iterator by calling its __next__() method. 

4. Write a program in Python using generators to reverse the string.
Input String = “Consultadd Training”

Ans:
string = "Consultadd Training"
print  ("The reversed string(using loops) is : ",end="") 
print (reverse(string))

5. Write an example on decorators.
A decorator takes a function, extends it and returns. Yes, a function can return a function.

Ans:
def hello(func):                                                                                            
    def inner():                                                                                            
        print("Hello ")                                                                                     
        func()                                                                                              
    return inner                                                                                            
                                                                                                            
def name():                                                                                                 
    print("Anjali")                                                                                          
                                                                                                            
                                                                                                            
obj = hello(name)                                                                                           
obj()   


